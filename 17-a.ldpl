data:

auxText is text
programList is text list
auxNumber is number
program is text map
inputBuffer is text list
outputBuffer is text list
output is text
image is text map map
x is number
y is number
maxX is number
maxY is number
deltas is number list list
d is number
dX is number
dY is number
result is number

procedure:

load file "17.txt" in auxText
split auxText by "," in programList

store 0 in auxNumber
for each auxText in programList do
    trim auxText in auxText
    store auxText in program:auxNumber
    in auxNumber solve auxNumber + 1
repeat

push list to deltas
push list to deltas
push list to deltas
push list to deltas
push list to deltas
push 0 to deltas:0
push -1 to deltas:0
push 1 to deltas:1
push 0 to deltas:1
push 0 to deltas:2
push 1 to deltas:2
push -1 to deltas:3
push 0 to deltas:3
push 0 to deltas:4
push 0 to deltas:4

call runProgram with program "0" inputBuffer outputBuffer 0 "0" 0
for each output in outputBuffer do
    if output is equal to "10" then
        in y solve y + 1
        store 0 in x
        display crlf
    else
        store output in auxNumber
        get ascii character auxNumber in auxText
        store auxText in image:x:y
        in x solve x + 1
        store x in maxX
        display auxText
    end if
repeat

in y solve y - 1
store y in maxY
for y from 1 to maxY step 1 do
    for x from 1 to maxX step 1 do
        for d from 0 to 5 step 1 do
            in dX solve x + deltas:d:0
            in dY solve y + deltas:d:1
            if image:dX:dY is equal to "." then
                break
            end if
        repeat
        if d is equal to 5 then
            in result solve result + x * y
        end if
    repeat
repeat

display result crlf

sub runProgram
parameters:
    program is text map
    pc is text
    inputBuffer is text list
    outputBuffer is text list
    inputCount is number
    relBase is text
    haltSignal is number
local data:
    opcode is text
    mode0 is text
    mode1 is text
    mode2 is text
    inA is text
    inB is text
    out is text
    auxNumber is number
procedure:
    while 0 is equal to 0 do
        store program:pc in opcode
        if opcode is equal to "" then
            store "0" in opcode
        end if
        call sumBig with pc "1" pc

        while 0 is equal to 0 do  # Pad with 0
            get length of opcode in auxNumber
            if auxNumber is less than 5 then
                in opcode join "0" opcode
            else
                break
            end if
        repeat

        get character at 0 from opcode in mode2
        get character at 1 from opcode in mode1
        get character at 2 from opcode in mode0
        substring opcode from 3 length 2 in opcode
        if opcode is equal to "99" then
            store 1 in haltSignal
            return
        else if opcode is not equal to "03" then
            call readParameter with mode0 program pc relBase inA
            call sumBig with pc "1" pc
            if opcode is equal to "04" then
                push inA to outputBuffer
            else if opcode is equal to "09" then
                call sumBig with relBase inA relBase
            else
                call readParameter with mode1 program pc relBase inB
                call sumBig with pc "1" pc
                if opcode is equal to "01" then
                    call sumBig with inA inB out
                else if opcode is equal to "02" then
                    call mulBig with inA inB out
                else if opcode is equal to "05" then
                    if inA is not equal to "0" then
                        store inB in pc
                    end if
                    continue
                else if opcode is equal to "06" then
                    if inA is equal to "0" then
                        store inB in pc
                    end if
                    continue
                else if opcode is equal to "07" then
                    call lessBig with inA inB out
                else if opcode is equal to "08" then
                    if inA is equal to inB then
                        store 1 in out
                    else
                        store 0 in out
                    end if
                end if
                if program:pc is equal to "" then
                    store 0 in program:pc
                end if
                call saveParameter with mode2 program pc relBase out
                call sumBig with pc "1" pc
            end if
        else  # 03
            get length of inputBuffer in auxNumber
            if inputCount is less than auxNumber then
                if program:pc is equal to "" then
                    store 0 in program:pc
                end if
                call saveParameter with mode0 program pc relBase inputBuffer:inputCount
                call sumBig with pc "1" pc
                in inputCount solve inputCount + 1
            else
                call sumBig with pc "-1" pc
                return
            end if
        end if
    repeat
end sub

sub readParameter
parameters:
    mode is text
    program is text map
    pc is text
    relBase is text
    result is text
procedure:
    if mode is equal to "0" then
        call readParameter with "2" program pc "0" result
    else if mode is equal to "1" then
        store program:pc in result
    else
        call readParameter with "1" program pc relBase result
        call sumBig with result relBase result
        store program:result in result
    end if
    if result is equal to "" then
        store "0" in result
    end if
end sub

sub saveParameter
parameters:
    mode is text
    program is text map
    pc is text
    relBase is text
    save is text
local data:
    result is text
procedure:
    if mode is equal to "0" then
        call saveParameter with "2" program pc "0" save
    else
        call readParameter with "1" program pc relBase result
        call sumBig with result relBase result
        store save in program:result
    end if
end sub

sub sumBig
parameters:
    a is text
    b is text
    res is text
local data:
	resNum is number
procedure:
    in resNum solve a + b
    store resNum in res
end sub

sub mulBig
parameters:
    a is text
    b is text
    res is text
local data:
	resNum is number
procedure:
    in resNum solve a * b
    store resNum in res
end sub

sub lessBig
parameters:
    a is text
    b is text
    res is text
local data:
	aNum is number
	bNum is number
procedure:
	store a in aNum
	store b in bNum
    if aNum is less than bNum then
    	store "1" in res
    else
    	store "0" in res
    end if
end sub