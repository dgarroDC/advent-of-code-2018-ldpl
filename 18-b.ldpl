data:

auxText is text
lines is text list
map is text list list
length is number
deltas is number list list
x is number
y is number
maxX is number
maxY is number
iniX is number
iniY is number
bots is number list list
door is text
key is text
doorOf is text map
keyOf is text map
keys is number map
allKeys is text list
keysPos is number list map
dist is number map map
reqs is number map map
req is number map
visited is number map map
mem is text map
result is number 

procedure:

load file "18.txt" in auxText
trim auxText in auxText
split auxText by crlf in lines

for each auxText in lines do
    push list to map
    split auxText by "" in map:length
    in length solve length + 1
repeat

store length in maxY
get length of map:0 in maxX

push list to deltas
push list to deltas
push list to deltas
push list to deltas
push list to deltas
push 0 to deltas:0
push -1 to deltas:0
push 1 to deltas:1
push 0 to deltas:1
push 0 to deltas:2
push 1 to deltas:2
push -1 to deltas:3
push 0 to deltas:3

for x from 65 to 91 step 1 do
    in y solve x + 32
    get ascii character x in door
    get ascii character y in key
    store door in doorOf:key
    store key in keyOf:door
    push key to allKeys
repeat

for x from 0 to maxX step 1 do
    for y from 0 to maxY step 1 do
        if map:y:x is equal to "@" then
            store x in iniX
            store y in iniY
        else if doorOf:map:y:x is not equal to "" then
            push x to keysPos:map:y:x
            push y to keysPos:map:y:x
        end if
    repeat
repeat

call getReq with iniX iniY

store "#" in map:iniY:iniX
in x solve iniX - 1
store "#" in map:iniY:x
in x solve iniX + 1
store "#" in map:iniY:x
in y solve iniY - 1
store "#" in map:y:iniX
in y solve iniY + 1
store "#" in map:y:iniX

push list to bots
push 0 to bots:0
in bots:0:0 solve iniX - 1
push 0 to bots:0
in bots:0:1 solve iniY - 1
store "0" in map:bots:0:1:bots:0:0
call getDist with bots:0:0 bots:0:1

push list to bots
push 0 to bots:1
in bots:1:0 solve iniX + 1
push 0 to bots:1
in bots:1:1 solve iniY - 1
store "1" in map:bots:1:1:bots:1:0
call getDist with bots:1:0 bots:1:1

push list to bots
push 0 to bots:2
in bots:2:0 solve iniX - 1
push 0 to bots:2
in bots:2:1 solve iniY + 1
store "2" in map:bots:2:1:bots:2:0
call getDist with bots:2:0 bots:2:1

push list to bots
push 0 to bots:3
in bots:3:0 solve iniX + 1
push 0 to bots:3
in bots:3:1 solve iniY + 1
store "3" in map:bots:3:1:bots:3:0
call getDist with bots:3:0 bots:3:1

for each key in allKeys do
    call getDist with keysPos:key:0 keysPos:key:1
repeat

call xxx with bots keys result
display result crlf

sub xxx
parameters:
    bots is number list list
    keys is number map
    result is number
local data:
    x is number
    y is number
    bot is number
    newBots is number list list
    from is text
    key is text
    key2 is text
    newRes is number
    memKey is text
procedure:
    in memKey join bots:0:0 "," bots:0:1 "," bots:1:0 "," bots:1:1 "," bots:2:0 "," bots:2:1 "," bots:3:0 "," bots:3:1
    for each key in allKeys do
        if keys:key is equal to 1 then
            in memKey join memKey key
        end if
    repeat
    if mem:memKey is not equal to "" then
        store mem:memKey in result
        return
    end if

    store 0 in result
    for each key in allKeys do
        if keys:key is equal to 0 then
            for each key2 in allKeys do
                if reqs:key:key2 is equal to 1 and keys:key2 is equal to 0 then
                    goto continue
                end if
            repeat

            copy bots to newBots
            for bot from 0 to 4 step 1 do
                if dist:bot:key is greater than 0 then
                    copy keysPos:key to newBots:bot
                    store bots:bot:0 in x
                    store bots:bot:1 in y
                    store map:y:x in from
                end if
            repeat

            store 1 in keys:key
            call xxx with newBots keys newRes
            store 0 in keys:key
            in newRes solve newRes + dist:from:key
            if result is equal to 0 or newRes is less than result then
                store newRes in result
            end if
        end if
        label continue
        store "" in auxText
    repeat

    store result in mem:memKey
end sub

sub getDist
parameters:
    cX is number
    cY is number
local data:
    from is text
    x is number
    y is number
    d is number
    dX is number
    dY is number
    visited is number map map
    xs is number list
    ys is number list
    used is number
    cell is text
    steps is number
    stepss is number list
procedure:
    push cX to xs
    push cY to ys
    push -1 to stepss
    store map:cY:cX in from
    while 0 is equal to 0 do
        store xs:used in x
        store ys:used in y
        in steps solve stepss:used + 1
        store 1 in visited:y:x
        store map:y:x in cell
        if cell is not equal to "." then
            store steps in dist:from:cell
        end if
        for d from 0 to 4 step 1 do
            in dX solve x + deltas:d:0
            in dY solve y + deltas:d:1
            store map:dY:dX in cell
            if visited:dY:dX is not equal to 1 and cell is not equal to "#" then
               push dX to xs
               push dY to ys
               push steps to stepss
            end if
        repeat
        in used solve used + 1
        get length of xs in x
        if used is greater than or equal to x then
            return
        end if
    repeat
end sub

sub getReq
parameters:
    x is number
    y is number
local data:
    d is number
    dX is number
    dY is number
    cell is text
procedure:
    store 1 in visited:y:x
    if doorOf:map:y:x is not equal to "" then
        copy req to reqs:map:y:x
    end if
    for d from 0 to 4 step 1 do
        in dX solve x + deltas:d:0
        in dY solve y + deltas:d:1
        store map:dY:dX in cell
        if visited:dY:dX is not equal to 1 and cell is not equal to "#" then
           if keyOf:cell is not equal to "" then
                store 1 in req:keyOf:cell
           end if
           call getReq with dX dY
           store 0 in req:keyOf:cell
        end if
    repeat
end sub