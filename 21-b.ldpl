data:

auxText is text
programList is text list
auxNumber is number
program is number list
pc is number
inputBuffer is number list
outputBuffer is number list
inputCount is number
relBase is number
inputText is text

procedure:

load file "21.txt" in auxText
split auxText by "," in programList

for each auxText in programList do
    trim auxText in auxText
    store auxText in auxNumber
    push auxNumber to program
repeat
for auxNumber from 0 to 100000 step 1 do
    push 0 to program
repeat

store 0 in pc
store 0 in relBase
store quote in inputText
NOT A J
NOT B T
OR T J
NOT C T
OR T J
AND D J
NOT E T
NOT T T
OR H T
AND T J
RUN

end quote
call inputASCII with inputText inputBuffer
call runProgram with program pc inputBuffer outputBuffer inputCount relBase 0
call outputLast with outputBuffer

sub inputASCII
parameters:
    input is text
    inputBuffer is number list
local data:
    length is number
    c is number
    char is text
    ascii is number
procedure:
    get length of input in length
    for c from 0 to length step 1 do
        get character at c from input in char
        get character code of char in ascii
        push ascii to inputBuffer
     repeat
end sub

sub outputASCII
parameters:
    outputBuffer is number list
local data:
    ascii is number
    char is text
procedure:
    for each ascii in outputBuffer do
        get ascii character ascii in char
        display char
    repeat
end sub

sub outputLast
parameters:
    outputBuffer is number list
local data:
    length is number
procedure:
    get length of outputBuffer in length
    in length solve length - 1
    display outputBuffer:length crlf
end sub

sub runProgram
parameters:
    program is number list
    pc is number
    inputBuffer is number list
    outputBuffer is number list
    inputCount is number
    relBase is number
    haltSignal is number
local data:
    opcode is text
    mode0 is text
    mode1 is text
    mode2 is text
    inA is number
    inB is number
    out is number
    auxNumber is number
procedure:
    while 0 is equal to 0 do
        store program:pc in opcode
        in pc solve pc + 1

        while 0 is equal to 0 do  # Pad with 0
            get length of opcode in auxNumber
            if auxNumber is less than 5 then
                in opcode join "0" opcode
            else
                break
            end if
        repeat

        get character at 0 from opcode in mode2
        get character at 1 from opcode in mode1
        get character at 2 from opcode in mode0
        substring opcode from 3 length 2 in opcode
        if opcode is equal to "99" then
            store 1 in haltSignal
            return
        else if opcode is not equal to "03" then
            call readParameter with mode0 program pc relBase inA
            in pc solve pc + 1
            if opcode is equal to "04" then
                push inA to outputBuffer
            else if opcode is equal to "09" then
                in relBase solve inA + relBase
            else
                call readParameter with mode1 program pc relBase inB
                in pc solve pc + 1
                if opcode is equal to "01" then
                    in out solve inA + inB
                else if opcode is equal to "02" then
                    in out solve inA * inB
                else if opcode is equal to "05" then
                    if inA is not equal to 0 then
                        store inB in pc
                    end if
                    continue
                else if opcode is equal to "06" then
                    if inA is equal to 0 then
                        store inB in pc
                    end if
                    continue
                else if opcode is equal to "07" then
                    if inA is less than inB then
                        store 1 in out
                    else
                        store 0 in out
                    end if
                else if opcode is equal to "08" then
                    if inA is equal to inB then
                        store 1 in out
                    else
                        store 0 in out
                    end if
                end if
                call saveParameter with mode2 program pc relBase out
                in pc solve pc + 1
            end if
        else  # 03
            get length of inputBuffer in auxNumber
            if inputCount is less than auxNumber then
                call saveParameter with mode0 program pc relBase inputBuffer:inputCount
                in pc solve pc + 1
                in inputCount solve inputCount + 1
            else
                in pc solve pc - 1
                return
            end if
        end if
    repeat
end sub

sub readParameter
parameters:
    mode is text
    program is number list
    pc is number
    relBase is number
    result is number
procedure:
    if mode is equal to "0" then
        store program:program:pc in result
    else if mode is equal to "1" then
        store program:pc in result
    else
        store program:pc in result
        in result solve result + relBase
        store program:result in result
    end if
end sub

sub saveParameter
parameters:
    mode is text
    program is number list
    pc is number
    relBase is number
    save is number
local data:
    result is number
procedure:
    if mode is equal to "0" then
        store save in program:program:pc
    else
        store program:pc in result
        in result solve result + relBase
        store save in program:result
    end if
end sub